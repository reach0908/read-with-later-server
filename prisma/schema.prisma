// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  name       String?
  provider   String
  providerId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  refreshTokens   RefreshToken[]
  scrapedPages    ScrapedPage[]
  scrapeHistories ScrapeHistory[]

  @@unique([provider, providerId])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  isValid   Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

// --- 웹 스크래핑 영역 추가 ---

enum ScrapeStatus {
  SUCCESS
  FAILED
}

model ScrapedPage {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  url String @db.Text // 정규화된 URL

  title   String?
  content String       @db.Text
  status  ScrapeStatus @default(SUCCESS)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  scrapedAt DateTime @default(now())

  @@unique([userId, url])
}

model ScrapeHistory {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  url       String       @db.Text
  status    ScrapeStatus
  errorMsg  String?
  duration  Int?
  createdAt DateTime     @default(now())
}
